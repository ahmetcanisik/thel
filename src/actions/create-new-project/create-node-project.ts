import {MakeDirs, WriteFile} from "../../lib/filen";
import {logger} from "../../helpers/logger";

export async function CreateNodeProject(
    project_name: string,
) {
    let anyError = false;

    // create project directory.
    await MakeDirs(project_name, {noWarnings: true})
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    `Error: create ${project_name} directory.`,
                    e
                )
            }
        );

    // add package.json to project with npm init
    // await RunStep(`npm init -y --prefix ${project_name}`, "add package.json to project with npm init");

    // add project dependencies to package.json
    // await RunStep(`npm i @types/node typescript --save-dev --prefix ${project_name}`, "install project dependencies");
    /*let projectDeps = await ReadFile([project_name, "package.json"], { parseToJson: true });
    projectDeps = {
        ...projectDeps,
        "devDependencies": {
            "typescript": "latest",
            "@types/node": "latest"
        }
    };*/

    // add package.json to project
    await WriteFile([project_name, "package.json"], JSON.stringify({
        "name": project_name,
        "version": "0.1.0",
        "description": "",
        "main": "./dist/index.js",
        "scripts": {
            "build": "tsc",
            "try": "npm run build && node ."
        },
        "files": [
            "dist",
            "LICENSE",
            "README.md",
            "package.json"
        ],
        "license": "MIT",
        "author": "",
        "keywords": [
            project_name
        ],
        "devDependencies": {
            "typescript": "^5.7.3",
            "@types/node": "^22.13.1"
        }
    }, null, 2), {noWarnings: true})
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: add package.json to project",
                    e
                )
            }
        );

    // npx tsc --init
    // read tsconfig.json file
    // push in;
    // rootDir: "./src"
    // outDir: "./dist"

    // add tsconfig.json to project with tsc --init
    // await RunStep(`cd ${project_name} && npx -y tsc --init`, "add tsconfig.json to project with tsc --init");

    // add tsconfig.json to project
    await WriteFile([project_name, "tsconfig.json"], JSON.stringify({
        "compilerOptions": {
            "target": "es2016",
            "module": "commonjs",
            "rootDir": "./src",
            "baseUrl": "./",
            "declaration": true,
            "allowJs": true,
            "outDir": "./dist",
            "esModuleInterop": true,
            "forceConsistentCasingInFileNames": true,
            "strict": true,
            "skipLibCheck": true
        },
        "exclude": ["node_modules"],
        "include": ["src"]
    }, null, 2), {noWarnings: true})
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: add tsconfig.json to project",
                    e
                )
            }
        );


    // add .gitignore file to project
    await WriteFile([project_name, ".gitignore"], `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*`)
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: add .gitignore file to project",
                    e
                )
            }
        );

    // add LICENSE file to project
    await WriteFile([project_name, "LICENSE"], `The MIT License (MIT)

Copyright (c) 2011-2025 The Bootstrap Authors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.`)
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: add LICENSE file to project",
                    e
                )
            }
        );

    // add README.md file to project
    await WriteFile([project_name, "README.md"], `# ${project_name}\n`)
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: add README.md file to project",
                    e
                )
            }
        );

    // make src dir on project
    // create project directory.
    await MakeDirs([project_name, "src"])
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: Create src directory on project",
                    e
                )
            }
        );

    // create create-dir-movein.ts file in src directory.
    await WriteFile([project_name, "src", "index.ts"], 'console.log("Hello, World!")')
        .catch((e: any) => {
                anyError = true;
                logger.error(
                    "Error: Create create-dir-movein.ts file in src directory.",
                    e
                )
            }
        );


    if (!anyError) {
        logger.success(`Done: The Node project '${project_name}' has been created successfully!`);
        console.log(`\nNext Steps\n----------\ncd ${project_name}\nnpm run install\nnpm run try`);
    }
}
